#!/bin/bash

[ -z "$CRYVAR_TMPLDIR" ] && CRYVAR_TMPLDIR="$HOME/crydarba/tmpl"
[ -z "$CRYVAR_BSDIR" ] && CRYVAR_BSDIR="$HOME/crydarba/tmpl/basis"
[ -z "$CRYVAR_FXLDIR" ] && CRYVAR_FXLDIR="$HOME/crydarba/tmpl/fxnls"

echo "=== Call: $0 $@"
comment=""; spcgrp=0; latcon=""; numel=0; wypos=""; dfa=""; basis=""; template=""; helpme=false
while getopts "hc:g:l:n:w:b:d:t:" myopts; do
    case $myopts in
    c) comment="$OPTARG"; ;;
    g) spcgrp="$OPTARG"; ;;
    l) latcon="$OPTARG"; ;;
    n) numel="$OPTARG"; ;;
    w) wypos="$OPTARG"; ;;
    d) dfa="$OPTARG"; ;;
    b) basis="${OPTARG%.bas}"; ;;
    t) template="${OPTARG%.d12}"; ;;
    h) helpme=true;;
    \?) echo "Some specified options were not recognized. Try pre2crys -h for information about available options."; exit 1 ;; # for cases of "invented" options
    esac
done
shift "$((OPTIND-1))"
outfile="${1%.d12}.d12"
[ -z "$outfile" ] && helpme=true
#echo "DEBUG: comment is: $comment"

if ($helpme); then
    echo -e "Usage: pre2crys [-c "COMMENT"] -g SPACEGROUP -l LATTICE_CONSTANT -n NUMBER_OF_ELEMENTS -w WYKOFF_POSITIONS_LINE -d DENSITY_FUNCTIONAL_APPROXIMATION_TO_USE -b BASIS_SET_NAME -t TEMPLATE_NAME INPUT_FILE_NAME\n\nIn WYKOFF_POSITIONS_LINE and DENSITY_FUNCTIONAL_APPROXIMATION_TO_USE (if neccessary) the newlines should be replaced with hashes (#)."
    echo -e "We also expect the following environmental variables to be non-empty:\n\tCRYVAR_TMPLDIR\t: where the template file is\n\tCRYVAR_BSDIR\t: where the basis sets are (grouped in folders for each element, e.g. folders Ca F K in which we have files TZVP.bas etc.)\n\tCRYVAR_FXLDIR\t: where non-standard functionals are (files like PW1PW20HF.fxl which contain lines defining them in input -- see CRYSTAL manual)"
    echo -e "If the comment is not given, it is prompted for; if the answer to that prompt is pressing 'Enter', the comment is made from the FILENAME + FUNCTIONAL + BASIS_SET"
    exit 0
fi

[ ! -f "$CRYVAR_TMPLDIR/${template}.d12" ] && [ ! -L "$CRYVAR_TMPLDIR/${template}.d12" ] && echo "Cannot find the template input file ${template}!" && exit 2
cp "$CRYVAR_TMPLDIR/${template}.d12" "./${outfile}"
if [ "$(echo "${dfa}" | sed 's@^\(R\|U\)@@')" == 'HF' ]; then
    sed -i '/^DFT/,/^END/d' "./${outfile}"
fi
mv "./${outfile}" "./${outfile}.tmp"

ecpcheckf="/tmp/whetherecp.$$"
curselbasf="/tmp/curselbas.$$"
touch "$curselbasf"
selbasf="/tmp/selbas.$$"
touch "$selbasf"
sed -n '1,/==BASIS/p' "./${outfile}.tmp" | sed '$d' > "./${outfile}"
curselbas=""
echo "$wypos" | tr -d '"' | sed 's@#@\n@g' | sed '$d' | gawk '{print $1}' | while read un; do
    el=$(sed -n "${un}p" $HOME/.pertanu)
    basfile="$CRYVAR_BSDIR/${el}/${basis}.bas"
    if [ ! -f "$basfile" ] && [ ! -L "$basfile" ]; then
        #ls -l "$CRYVAR_BSDIR/${el}/${basis}.bas"
        echo -e "! Cannot find the basis set file \e[41;97m${basis}\e[m for element \e[41;97m${el}\e[m!"
        echo "Aborting."
        rm "./${outfile}.tmp" "./${outfile}"
        exit 24 # exits only the subshell of the while loop
    fi
    [ -L "$CRYVAR_BSDIR/${el}/${basis}.bas" ] && curselbas="$(cat "$curselbasf" | xargs) ${el}:$(basename $(ls -l "$CRYVAR_BSDIR/${el}/${basis}.bas" | gawk '{print $NF}'))"
    [ -L "$CRYVAR_BSDIR/${el}/${basis}.bas" ] && echo ">>> Basis ${el}:${basis} is a link to ${curselbas# }"
    cat "$basfile" >> "./${outfile}"
    eldef="$(head -1 "$basfile" | grep -o '^[0-9]\+')"
    if [ "${#eldef}" -gt 2 ]; then # Crystal will not consider atoms with Z > 99, using first number for specifying
                                   # either a site-specific BS or a BS with an ECP
        echo "${eldef:0:1}" >> "$ecpcheckf" 
    else
        echo "0" >> "$ecpcheckf"
    fi
    echo "$curselbas" >> "$curselbasf"
done
if [ $? -eq 24 ]; then
    exit 2
fi
if [ -f "$selbasf" ]; then
    cat "$selbasf" | while read un; do
        [ -L "$un" ] && rm "$un"
    done
    rm "$selbasf"
fi
[ -f "$curselbasf" ] && rm "$curselbasf"

[ -z "$comment" ] && read -p "Please enter the comment/human-readable info about this job:   " comment
[ -z "$comment" ] && comment="${outfile%.d12} ${template%.d12} $dfa $basis $curselbas"


[ ! -f "./${outfile}" ] && exit 3
wypos2="#${wypos%\#}"
for yu in $(seq 1 $(cat "$ecpcheckf" | wc -l)); do
    if [ "$(sed -n "$yu"'p' "$ecpcheckf")" != "0" ]; then
        #wypos2="${wypos2/\#/%2}"
        natsymb="$(sed -n "$yu"'p' "$ecpcheckf")"
        wypos2="$(echo "$wypos2" | sed 's@#@%'"$natsymb"'@')"
    else
        wypos2="${wypos2/\#/%}"
    fi
done
rm "$ecpcheckf"
#echo "$wypos2"
wypos="${wypos2//%/\#}"

sed -n '/==BASIS/,$p' "./${outfile}.tmp" | sed '1d' >> "./${outfile}"
rm "./${outfile}.tmp"
sed -i '1s@==COMMENT@'"$comment"'@' "./${outfile}"
sed -i 's@==GROUP@'"$spcgrp"'@' "./${outfile}"
sed -i 's@==LATCON@'"$latcon"'@' "./${outfile}"
sed -i 's@==NUMEL@'"$numel"'@' "./${outfile}"
sed -i 's@==LISTWYKOFF@&'"${wypos#\#}"'@' "./${outfile}"
sed -i 's@==DFA@&'"${dfa%#}"'@' "./${outfile}"

sed -i '/==LISTWYKOFF/s@#@\n@g;s/==LISTWYKOFF//' "./${outfile}"
sed -i '/==DFA/s@#@\n@g;s/==DFA//' "./${outfile}"


for un in $curselbas; do
    el="$(echo "$un" | cut -d : -f 1)"
    realbas="$(echo "$un" | cut -d : -f 2)"
    fakebas="$(ls -l "$CRYVAR_BSDIR/${el}" | grep '^l' | grep "$realbas" | cut -d '>' -f 1 | sed 's@ -$@@' | gawk '{print $NF}')"
    rm "$CRYVAR_BSDIR/${el}/${fakebas}"
done

